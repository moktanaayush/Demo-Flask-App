name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --statistics
        
    - name: Run tests
      run: |
        pytest -v --tb=short
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t flask-app:latest .
        docker build -t flask-app:${{ github.sha }} .
        
    - name: Save Docker image as artifact
      run: |
        docker save flask-app:latest | gzip > flask-app.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: flask-app.tar.gz
        retention-days: 1

  deploy:
    needs: build-test-lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: Load Docker image
      run: |
        docker load < flask-app.tar.gz
        
    - name: Deploy with docker compose
      run: |
        # Stop existing services
        docker compose down || true
        
        # Start services with the new image
        docker compose up -d
        
    - name: Wait for application to start
      run: |
        echo "Waiting for application to start..."
        sleep 15
        
    - name: Health check
      run: |
        # Check if containers are running
        docker-compose ps
        
        # Test through Nginx (port 80)
        curl -f http://localhost/ || exit 1
        echo "Application is running successfully through Nginx!"
        
    - name: Show deployment info
      run: |
        echo "ðŸš€ Deployment completed!"
        echo "Application URL: http://localhost (via Nginx)"
        echo "Direct Flask URL: http://localhost:8000 (internal)"
        echo "Container status:"
        docker-compose ps
